/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PagedModelTheEntityResponseDTO,
  TheEntityRequestDTO,
  TheEntityResponseDTO,
} from '../models/index';
import {
    PagedModelTheEntityResponseDTOFromJSON,
    PagedModelTheEntityResponseDTOToJSON,
    TheEntityRequestDTOFromJSON,
    TheEntityRequestDTOToJSON,
    TheEntityResponseDTOFromJSON,
    TheEntityResponseDTOToJSON,
} from '../models/index';

export interface DeleteTheEntityRequest {
    theEntityId: string;
}

export interface GetTheEntitiesByPageAndSizeRequest {
    pageNumber?: number;
    pageSize?: number;
}

export interface GetTheEntityRequest {
    theEntityID: string;
}

export interface SaveTheEntityRequest {
    theEntityRequestDTO: TheEntityRequestDTO;
}

export interface UpdateTheEntityRequest {
    theEntityId: string;
    theEntityRequestDTO: TheEntityRequestDTO;
}

/**
 * 
 */
export class TheEntityExampleTagApi extends runtime.BaseAPI {

    /**
     * Deletes the entity using the provided UUID.
     * Delete an entity
     */
    async deleteTheEntityRaw(requestParameters: DeleteTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['theEntityId'] == null) {
            throw new runtime.RequiredError(
                'theEntityId',
                'Required parameter "theEntityId" was null or undefined when calling deleteTheEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/theEntity/{theEntityId}`.replace(`{${"theEntityId"}}`, encodeURIComponent(String(requestParameters['theEntityId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the entity using the provided UUID.
     * Delete an entity
     */
    async deleteTheEntity(requestParameters: DeleteTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTheEntityRaw(requestParameters, initOverrides);
    }

    /**
     * Fetches a paginated list of entities based on the provided page number and size.
     * Retrieve entities with pagination
     */
    async getTheEntitiesByPageAndSizeRaw(requestParameters: GetTheEntitiesByPageAndSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagedModelTheEntityResponseDTO>> {
        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/theEntity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagedModelTheEntityResponseDTOFromJSON(jsonValue));
    }

    /**
     * Fetches a paginated list of entities based on the provided page number and size.
     * Retrieve entities with pagination
     */
    async getTheEntitiesByPageAndSize(requestParameters: GetTheEntitiesByPageAndSizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagedModelTheEntityResponseDTO> {
        const response = await this.getTheEntitiesByPageAndSizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches the entity details using the provided UUID.
     * Retrieve an entity by its UUID
     */
    async getTheEntityRaw(requestParameters: GetTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TheEntityResponseDTO>> {
        if (requestParameters['theEntityID'] == null) {
            throw new runtime.RequiredError(
                'theEntityID',
                'Required parameter "theEntityID" was null or undefined when calling getTheEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/theEntity/{theEntityID}`.replace(`{${"theEntityID"}}`, encodeURIComponent(String(requestParameters['theEntityID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TheEntityResponseDTOFromJSON(jsonValue));
    }

    /**
     * Fetches the entity details using the provided UUID.
     * Retrieve an entity by its UUID
     */
    async getTheEntity(requestParameters: GetTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TheEntityResponseDTO> {
        const response = await this.getTheEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new entity using the provided entity details.
     * Create a new entity
     */
    async saveTheEntityRaw(requestParameters: SaveTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TheEntityResponseDTO>> {
        if (requestParameters['theEntityRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'theEntityRequestDTO',
                'Required parameter "theEntityRequestDTO" was null or undefined when calling saveTheEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/theEntity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TheEntityRequestDTOToJSON(requestParameters['theEntityRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TheEntityResponseDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new entity using the provided entity details.
     * Create a new entity
     */
    async saveTheEntity(requestParameters: SaveTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TheEntityResponseDTO> {
        const response = await this.saveTheEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the details of an existing entity using the provided UUID and entity details.
     * Update an existing entity
     */
    async updateTheEntityRaw(requestParameters: UpdateTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TheEntityResponseDTO>> {
        if (requestParameters['theEntityId'] == null) {
            throw new runtime.RequiredError(
                'theEntityId',
                'Required parameter "theEntityId" was null or undefined when calling updateTheEntity().'
            );
        }

        if (requestParameters['theEntityRequestDTO'] == null) {
            throw new runtime.RequiredError(
                'theEntityRequestDTO',
                'Required parameter "theEntityRequestDTO" was null or undefined when calling updateTheEntity().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/theEntity/{theEntityId}`.replace(`{${"theEntityId"}}`, encodeURIComponent(String(requestParameters['theEntityId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TheEntityRequestDTOToJSON(requestParameters['theEntityRequestDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TheEntityResponseDTOFromJSON(jsonValue));
    }

    /**
     * Updates the details of an existing entity using the provided UUID and entity details.
     * Update an existing entity
     */
    async updateTheEntity(requestParameters: UpdateTheEntityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TheEntityResponseDTO> {
        const response = await this.updateTheEntityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
